리액트의 작동 원리

<작동 원리>

1. 컴포넌트의 생성
- 리액트는 Components로 웹 어플리케이션을 만드는 것이라고 생각
- 재사용 가능한 작은 단위의 컴포넌트를 만들기
- 단일책임 : 하나의 책임을 가질 수 있는 단위로 잘게 나누기
- 컴포넌트 정의 방식, 함수로 정의, 반환값은 JSX 문법
```
ex) 숫자가 1씩 증가하는 버튼 기능의 컴포넌트
<CounterBtn title='Count Up!' />

// 함수형 컴포넌트
export function CounterBtn(props) {
  const handleCountUp = () => setCnt((cnt) => cnt + 1)
  const [cnt, setCnt] = useState(0);
  return (
    <div>
      <h1>{props.title}</h1>
      <button onClick={handleCountUp}>{cnt}</button>
    </div>
  )
}
```

2. Virtual Dom(가상 DOM) 생성
- 리액트는 UI 변경 사항을 찾아내기 위해 가상 DOM을 사용한다.
- 가상 DOM은 브라우저의 실제 DOM과 유사하나, 브라우저에서 처리되는 것이 아닌 자바스크립트 메모리에 존재

3. 컴포넌트 렌더링
- 가상 DOM을 사용하여 컴포넌트를 렌더링한다. 컴포넌트는 자신의 상태(state)와 속성(props)을 기반으로 렌더링된다.

4. 가상 DOM 업데이트
- 사용자의 입력 또는 이벤트 행위에 의해 UI가 변경되면, 리액트는 가상 DOM에서 그 부분만 업데이트 하여 실제 DOM에 적용하므로 성능이 향상된다.

5. 실제 DOM 업데이트
- 가상 DOM의 업데이트 이후, 변경된 부분만 감지하여 실제 DOM에 적용. 이를 통해 브라우저에 UI가 업데이트된다.


-- 그 외 리액트 특징 --

6. SPA(Single Page Application)
- index.html이 하나인 애플리케이션으로 사용자가 버튼 클릭시 다른 페이지를 다운받아 오는 것이 아닌 한 어플리케이션 내에서 버튼 클릭 시 컴포넌트를 보여주고 숨기고 하는 방식

7. CSR(Client Side Rendering)
- 클라이언트(브라우저)에서 렌더링이 이루어짐
- 사용자가 웹 어플리케이션 접속시 html이 바로 눈에 보여지는 것이 아니라 페이지에 필요한 리소스들을 먼저 서버에 요청 후 다운로드 받아 사용자 화면에 보여지는 것
- 처음 화면은 빈화면이나 다음 동작 시에는 캐싱되어 있는 리소스를 보여주므로 초기 랜더링 이후 속도가 빠르다


> 즉, 리액트는 실제 DOM을 조작하는 것이 아닌 가상 DOM을 제어하여 변경된 부분만 다시 그려주기 때문에 실제 DOM에서 하나의 변경사항이 있을때마다 브라우저를 매번 리렌더, 리페인트하는 것보다 그 부분만 리렌더, 리페인트 하는 원리이기 때문에 실제 DOM을 제어하는 것보다 훨씬 효율적이라고 볼 수 있다.