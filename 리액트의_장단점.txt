리액트의 장점
1. Virtual DOM
- 리액트에서 어떤 상태값이 변경되어 업데이트 되면 이전 가상 돔 트리와 새로운 가상 돔 트리를 비교 후 변경된 요소들만 찾아 실제 DOM에 업데이트 하므로, 이 경우 DOM은 변경된 부분의 업데이트를 한 번만 하면 되고 리렌더링도 한 번만 하게 되어 변경사항이 있을 때마다 브라우저 렌더과정을 거쳐야하는 DOM 조작에 비해 효율적

- dom을 직접 건드리지 않아서 원본 dom의 훼손을 막을 수 있다는 점
: js의 경우는 원본 dom을 가져와서 이벤트 작동시 그 dom을 직접 수정하는 방식을 썼는데, 이는 직관적이긴 하나 수정이나 오류를 고칠때 원본이 훼손될 수 있는 위험이 있다.

2. Components의 사용
- DOM 모델은 트리 형태로 표현되는 구조로 상위 노드가 하위 노드를 포함하는 형태다. 화면에 요소가 많아질수록 중첩 구조가 복잡해서 가독성이나 재사용성, 변경의 용이함 등이 떨어지게 된다. 

- 리액트에서 컴포넌트화를 하게 되면 중첩된 복잡한 구조를 하나의 컴포넌트로 쪼개 나누어 각 컴포넌트는 어떤 기능을 하는지 알기 쉽고(가독성), 중복 코드를 줄일 수 있으며 화면의 다른 페이지에서도 재사용할 수 있다는 장점이 있다.

3. 프레임워크가 아닌 라이브러리인 점 -> js 문법을 그대로 사용
- 이미 정해진 기능 내에서 사용해야하는 프레임워크와 달리 라이브러리는 사용자가 필요할 때마다 부분적 사용이 가능하고, 프레임워크는 프레임워크가 지정해주는 문법에 따라 작성해야하지만 라이브러리인 자바스크립트는 js 문법으로 자유롭게 개발할 수 있다는 점

ex) 자바스크립트의 삼항연산자나 && 연산자를 사용하여 조건에 따라 뷰단에 보이게 하거나 안보이도록 제어할 수 있다.

// && 연산자 방식
<div>
	{isNew && <span>신규회원</span>}
</div>

// 삼항 연산자 방식
<div>
	{isNew ? <span>신규회원</span> : null}
</div>


4. 라이브러리 사용으로 편리성과 빠른 개발에 있어 효율적
- react-router-dom
- styled-components
- styled-reset
- fontawesome

5. state, hook함수를 사용하여 상태 관리 가능
: js와 차별화되는 react의 특징으로는 state를 들수 있다. state는 현재 상태를 변수에 저장하고 이벤트의 발생시 이를 변화시킴으로서, state에 따라 다르게 화면을 구성할 수 있다. js는 state가 없어 1차원적인 반응형 웹만 구현이 가능했으나, react에서 state를 활용함으로서 다양한 정보와 이벤트에 따른 고차원적인 반응형 웹의 구현이 가능하다.

6. 큰 커뮤니티
- 오픈 소스 플랫폼인 GitHub에서 가장 많은 관심을 가지고 있는 커뮤니티는 react다.
- React에는 활발하게 활동하는 개발자 커뮤니티인 스택오버플로라는 웹사이트가 있어 개발자 간의 개발과 관련된 질문과 답변을 공유하는 공간이 활성화되어있어 지식 공유하기에 좋다.

7. 높은 성능
- React는 빠른 렌더링 속도와 효율적인 데이터 바인딩으로 알려져 있어 고성능 어플리케이션을 만들기에 적합하다.

8. 웹앱의 장점
- 모바일앱으로 발행이 쉽다
UX의 뛰어남, 페이지 전환이나 이벤트 등

---------------------------------------------------------------------------

리액트의 단점
1. Virtual DOM의 단점
- 일부 작업에서는 오히려 비효율적이다.
: 애니메이션 등 빠른 업데이트가 필요한 작업은 가상 돔을 사용하지 않는 것이 더 낫다.
- Virtual DOM은 객체를 따로 관리하므로 메모리 사용량이 늘어나는 단점이 있다.

2. Components를 하나하나 나누는 것은 처음 접근하는 개발자에게 복잡하고 이해하기 어려울 수 있다.

3. 초심자에게는 학습 곡선이 높아 JavaScript 경험이 있는 개발자에게는 쉽게 익힐 수 있지만 초심자들은 React 어플리케이션의 개념과 구조를 이해하기 어려울 수 있다.

4. 리액트에서 사용할 수 있는 라이브러리가 많은 이유라고 하면, React는 사용자 인터페이스에 초점을 맞추었기 때문에 라우팅 또는 데이터 관리와 같은 웹 개발의 다른 측면을 처리하기 위한 내장 도구가 많지 않다는 점이다.

5. JSX 문법의 사용
: JSX는 JavaScript 내에서 HTML과 유사한 코드를 작성할 수 있게 해주는 구문 확장이다. 이는 일부 개발자가 혼란스러워하거나 작업하기 어려움을 줄 수 있다.

6. SEO에 대한 지원의 부족
: React 어플리케이션은 클라이언트 측에서 렌더